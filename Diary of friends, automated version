#define _CRT_SECURE_NO_WARNINGS
#include <iostream>
#include <string>
#include <ctime>

void diaryActions();

class frend 
{
public:
    std::string name;
    long int timestamp;
    frend* FoF = NULL;
    // you cannot ADD any more attributes
    // make changes starting here 
    // constructors
    frend() :name(""), timestamp(0) {}
    frend(std::string Name) : name(Name), timestamp (0) {}
    // member functions
    void add(frend* newFoF)
    {
        FoF = newFoF;
    }
    // stop changes ending here
};

class diary 
{
public:
    frend** frendo;
    int size;

    // constructors
    diary(int diarySize) : size(diarySize) { frendo = new frend * [diarySize](); }
   
    // member functions
    
    void add(frend* newFriend, int entryNumber) // function for a new friend entry
    {
        if (entryNumber < size) // check if the entry isn't more than the size of our diary
        {
            frendo[entryNumber] = newFriend; // point frendo[index] to the new friend
            frendo[entryNumber]->timestamp = time(NULL); //assign time stamp to timestamp
        }
        else std::cout << "Diary is full." << std::endl; // if diary is full 
    }

private: // no need for access outside this class
    std::string timeofEntry(const long int& Stamp) // calculate time of entry
    {
        std::string timestamp; // create a string
        time_t T_timeStamp = Stamp; // create and set time to the time of entry
        struct tm* entryTime = localtime(&T_timeStamp); // point entryTime to a 
                                                        //pointer with the time info filled
        timestamp = asctime(entryTime); // get time and assign it to the string
        timestamp.erase(std::remove(timestamp.begin(), timestamp.end(), '\n'), timestamp.end()); 
        // format the string such as there is no new line at the end
        return timestamp; // return the string
    }

public:
    void print_names() // printing friends' names
    {
        for (int i = 0; frendo[i] != NULL && i < size; ++i) // if frendo isnt pointing to a null 
                                                            //AND i didn't exceed the size
        {
            std::cout << timeofEntry(frendo[i]->timestamp) << ", " 
                << frendo[i]->name << std::endl; // print the friend name 
        }
    }

    void print_fof() // print friends of friends
    {
        for (int i = 0; frendo[i] != NULL; ++i) // if frendo isnt pointing to a null
        {
            if (frendo[i]->FoF != NULL) // if it contains a name
                std::cout << frendo[i]->name << " has "
                << frendo[i]->FoF->name << " as a friend" << std::endl; // print the name 
            else std::cout << frendo[i]->name 
                << " has no friends, I'm afraid" << std::endl; // else print this
        }
    }

    // destructors
public:
    ~diary()
    {
        delete[] frendo; // delete frendo dynamic array
    }
};

int main() 
{
    // variables usage place
    int size; /*used at the start*/
    int action, entryNum, entryNumFoF; /*used for while loop structure*/
    std::string entryName; /*used for while loop structure*/

    std::cout << "Enter number of entries for the diary: "; // enter size of diary
    std::cin >> size;

    diary d(size); //create diary and assign the size of the diary to frendo dynamic array
    frend* friendEntry = new frend[size](); // create frend dynamic array and assign size to it

    diaryActions(); // diary list call

    while (true) // actions loop
    {
        std::cout << "Enter Action: "; // entering action
        std::cin >> action;
        switch (action) // switch case structure for action
        {
            //actions:
        case 1: // adding a new friend
        {
            std::cout << "Entry number: "; // enter the number of the entry
            std::cin >> entryNum; 
            std::cout << "Entry name: "; // enter the name of the entry (IE Friend)
            std::cin >> entryName;
            friendEntry[entryNum].name = entryName; // assign pointer to frend at that 
                                                    // number fo the name given
            d.add((friendEntry+entryNum), entryNum); // add friend to diary
            break; // exit switch structure
        }
        case 2: // adding a friend of a friend
        {
            std::cout << "Enter friend entry number from friend list to be assigned FoF to: ";
            std::cin >> entryNum; // entry friend 
            std::cout << "Enter friend entry number from friend list to be assigned as FoF: ";
            std::cin >> entryNumFoF; // enter friend of friend
            friendEntry[entryNum].add((friendEntry + entryNumFoF)); // assign friend of friend to friend
            break; // exit switch structure
        }
        case 3: // printing friend name list
        {
            d.print_names(); // function call 
            break; // exit switch structure
        }
        case 4: // print friend of friend name list
        {
            d.print_fof(); // function call
            break; // exit switch structure
        }
        case 5: // exiting program
        {
            std::cout << "Exiting Diary... Thank you for your time!" << std::endl;
            exit(0); // no need for break since we're exiting
        }
        default: // if action number isnt in the list 
        {
            std::cout << "Wrong Choice... choose again!" << std::endl; // print message
            break; // exit switch structure
        }
        }

    }

    delete[] friendEntry; // delete frend dynamic array
    return 0;
}

void diaryActions() // print diary action list function
{
    std::cout 
        << "1. Add a new friend entry\n"
        << "2. Add friend of a friend\n"
        << "3. Print friends' names\n"
        << "4. Print friends of friends' names\n"
        << "5. Exit program"
        << std::endl;
}

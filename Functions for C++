1- sizeof() - part of the <limits.h> library, returns the size of a data type (works for arrays but not matrices), Examples:
ـــــــــــــــــــــــــــــــــــــــــــــــــــــــــــــــــــــــــ
{
int x = 55, y[] = { 1, 2, 3, 4, 5 };
	char c = 'c', b[] = "sezr";

	cout 
		<< "Size of integer x: " << (sizeof(x)) << endl 
		<< "Size of integer array y: " << (sizeof(y) / sizeof(y[0])) << endl 
		<< "Size of character c: " << sizeof(c) << endl 
		<< "Size of character array b: " << sizeof(b) << endl;
}
ـــــــــــــــــــــــــــــــــــــــــــــــــــــــــــــــــــــــــ
Output:
Size of integer x: 4
Size of integer array y: 5
Size of character c: 1
Size of character array b: 5
ـــــــــــــــــــــــــــــــــــــــــــــــــــــــــــــــــــــــــ
note* sizeof() returns the bytes used to store the data, hence we divided by the first element of array y to get the exact size of it
note* sizeof() a character array also accounts for the '\0'
ــــــــــــــــــــــــــــــــــــــــــــــــــــــــــــــــــــــــــــــــــــــــــــــــــــــــــــــــــــــــــــــــــــــــــــــــــــــــــــــــــ

2- sort() - part of the <algorithm> library, sorts an array by default in ascending order, Example:
ـــــــــــــــــــــــــــــــــــــــــــــــــــــــــــــــــــــــــ
{
  int x[] = { 5, 1, 8, 9, 2, 4, 6, 10, 3, 7 };

	cout << "Before sorting: ";
	for (int i = 0; i < (sizeof(x) / sizeof(x[0])); ++i)
	{
		cout << x[i] << " ";
	}
	
	sort(x, x + 10);

	cout << "\nAfter Sorting: ";
	for (int i = 0; i < (sizeof(x) / sizeof(x[0])); ++i)
	{
		cout << x[i] << " ";
	}
}
ـــــــــــــــــــــــــــــــــــــــــــــــــــــــــــــــــــــــــ
Output:
Before sorting: 5 1 8 9 2 4 6 10 3 7
After Sorting: 1 2 3 4 5 6 7 8 9 10
ـــــــــــــــــــــــــــــــــــــــــــــــــــــــــــــــــــــــــ
replacing 'sort(x, x+10)' with 'sort(x, x+10, greater<int>())' outputs:
Before sorting: 5 1 8 9 2 4 6 10 3 7
After Sorting: 10 9 8 7 6 5 4 3 2 1
ــــــــــــــــــــــــــــــــــــــــــــــــــــــــــــــــــــــــــــــــــــــــــــــــــــــــــــــــــــــــــــــــــــــــــــــــــــــــــــــــــ
